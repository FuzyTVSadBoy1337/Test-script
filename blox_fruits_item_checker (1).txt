-- üçì Blox Fruits Stats Sender to Localhost
-- Script g·ª≠i th√¥ng tin player stats l√™n trackstats server

local Player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local CommF = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_")

-- Config
local SERVER_URL = "http://localhost:5000/api/bloxfruits/stats"
local SEND_INTERVAL = 30 -- G·ª≠i data m·ªói 30 gi√¢y
local DEBUG_MODE = true

-- Utility function ƒë·ªÉ debug
local function debugPrint(message)
    if DEBUG_MODE then
        print("üçì [Stats Sender] " .. tostring(message))
    end
end

-- Function l·∫•y th√¥ng tin c∆° b·∫£n c·ªßa player
local function getPlayerStats()
    debugPrint("Getting player stats...")
    
    local stats = {
        player_name = Player.Name,
        user_id = Player.UserId,
        level = 0,
        beli = 0,
        fragments = 0,
        bounty = 0,
        honor = 0,
        equipped_fruit = nil,
        fighting_style = nil
    }
    
    -- L·∫•y data t·ª´ Player.Data
    local data = Player:FindFirstChild("Data")
    if data then
        if data:FindFirstChild("Level") then
            stats.level = data.Level.Value
        end
        if data:FindFirstChild("Beli") then
            stats.beli = data.Beli.Value
        end
        if data:FindFirstChild("Fragments") then
            stats.fragments = data.Fragments.Value
        end
        if data:FindFirstChild("Bounty") then
            stats.bounty = data.Bounty.Value
        end
        if data:FindFirstChild("Honor") then
            stats.honor = data.Honor.Value
        end
        if data:FindFirstChild("DevilFruit") then
            stats.equipped_fruit = data.DevilFruit.Value
        end
    end
    
    -- L·∫•y fighting style hi·ªán t·∫°i
    local success, currentStyle = pcall(function()
        return CommF:InvokeServer("GetCurrentStyle")
    end)
    if success and currentStyle then
        stats.fighting_style = currentStyle
    end
    
    debugPrint("Stats collected: Level " .. stats.level .. ", Beli " .. stats.beli)
    return stats
end

-- Function check fighting styles owned
local function getFightingStyles()
    debugPrint("Checking fighting styles...")
    
    local alias = {
        Combat           = {}, -- m·∫∑c ƒë·ªãnh c√≥
        DarkStep         = {"BuyBlackLeg", "BlackLeg"},
        Electro          = {"BuyElectro", "Electro"},
        WaterKungFu      = {"BuyFishmanKarate", "FishmanKarate"},
        DragonBreath     = {"BuyDragonBreath", "DragonBreath"},
        Superhuman       = {"BuySuperhuman", "Superhuman"},
        DeathStep        = {"BuyDeathStep", "DeathStep"},
        SharkmanKarate   = {"BuySharkmanKarate", "SharkmanKarate"},
        ElectricClaw     = {"BuyElectricClaw", "ElectricClaw"},
        DragonTalon      = {"BuyDragonTalon", "DragonTalon"},
        Godhuman         = {"BuyGodhuman", "Godhuman"},
    }
    
    local ownedStyles = {"Combat"} -- Combat lu√¥n c√≥
    
    for style, remotes in pairs(alias) do
        if style ~= "Combat" then
            local owned = false
            for _, remoteName in ipairs(remotes) do
                local ok, result = pcall(function()
                    return CommF:InvokeServer(remoteName, true)
                end)
                if ok and result == 1 then
                    owned = true
                    break
                end
            end
            
            if owned then
                table.insert(ownedStyles, style)
                debugPrint("Found owned style: " .. style)
            end
        end
    end
    
    return {owned = ownedStyles}
end

-- Function check weapons/items
local function getPlayerItems()
    debugPrint("Checking weapons...")
    
    local items = {
        swords = {},
        guns = {},
        fruits = {}
    }
    
    -- L·∫•y weapons t·ª´ inventory
    local success, inventory = pcall(function()
        return CommF:InvokeServer("getInventoryWeapons") 
    end)
    
    if success and inventory then
        for _, item in ipairs(inventory) do
            local name = item.Name or "Unknown"
            if item.Type == "Sword" then
                table.insert(items.swords, name)
                debugPrint("Found sword: " .. name)
            elseif item.Type == "Gun" then
                table.insert(items.guns, name)
                debugPrint("Found gun: " .. name)
            end
        end
    else
        debugPrint("Failed to get inventory weapons")
    end
    
    -- L·∫•y fruits t·ª´ inventory (n·∫øu c√≥)
    local fruitSuccess, fruitInventory = pcall(function()
        return CommF:InvokeServer("getInventoryFruits")
    end)
    
    if fruitSuccess and fruitInventory then
        for _, fruit in ipairs(fruitInventory) do
            table.insert(items.fruits, fruit.Name)
            debugPrint("Found fruit: " .. fruit.Name)
        end
    end
    
    return items
end

-- Function g·ª≠i data l√™n server
local function sendDataToServer(playerStats, fightingStyles, items)
    debugPrint("Sending data to server...")
    
    local payload = {
        -- Basic stats
        player_name = playerStats.player_name,
        user_id = playerStats.user_id,
        level = playerStats.level,
        beli = playerStats.beli,
        fragments = playerStats.fragments,
        bounty = playerStats.bounty,
        honor = playerStats.honor,
        equipped_fruit = playerStats.equipped_fruit,
        fighting_style = playerStats.fighting_style,
        
        -- Additional data
        fighting_styles = fightingStyles,
        items = items,
        
        -- Session info
        session_id = game.JobId,
        timestamp = os.time(),
        server_info = {
            place_id = game.PlaceId,
            job_id = game.JobId,
            players_count = #game.Players:GetPlayers()
        }
    }
    
    local jsonData = HttpService:JSONEncode(payload)
    
    -- G·ª≠i request (s·ª≠ d·ª•ng http c·ªßa executor)
    local success, response = pcall(function()
        -- Thay ƒë·ªïi ph∆∞∆°ng th·ª©c HTTP n√†y theo executor b·∫°n s·ª≠ d·ª•ng
        -- V√≠ d·ª• cho m·ªôt s·ªë executor ph·ªï bi·∫øn:
        
        -- Cho Synapse X:
        -- return syn.request({
        --     Url = SERVER_URL,
        --     Method = "POST",
        --     Headers = {["Content-Type"] = "application/json"},
        --     Body = jsonData
        -- })
        
        -- Cho Krnl/Delta:
        -- return http.request({
        --     Url = SERVER_URL,
        --     Method = "POST",
        --     Headers = {["Content-Type"] = "application/json"},
        --     Body = jsonData
        -- })
        
        -- Cho Script-Ware:
        -- return http_request({
        --     Url = SERVER_URL,
        --     Method = "POST",
        --     Headers = {["Content-Type"] = "application/json"},
        --     Body = jsonData
        -- })
        
        -- Generic approach - thay ƒë·ªïi theo executor c·ªßa b·∫°n
        if syn and syn.request then
            return syn.request({
                Url = SERVER_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        elseif http_request then
            return http_request({
                Url = SERVER_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        elseif http and http.request then
            return http.request({
                Url = SERVER_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        else
            error("No HTTP function found. Please update the script for your executor.")
        end
    end)
    
    if success and response then
        if response.StatusCode == 200 then
            debugPrint("‚úÖ Data sent successfully!")
            local responseData = HttpService:JSONDecode(response.Body)
            debugPrint("Server response: " .. (responseData.message or "OK"))
        else
            debugPrint("‚ùå Server returned error: " .. response.StatusCode)
        end
    else
        debugPrint("‚ùå Failed to send data: " .. tostring(response))
    end
end

-- Main function ƒë·ªÉ collect v√† g·ª≠i data
local function collectAndSendData()
    debugPrint("=== Collecting Blox Fruits Data ===")
    
    local playerStats = getPlayerStats()
    local fightingStyles = getFightingStyles()
    local items = getPlayerItems()
    
    debugPrint("Data collection complete. Sending to server...")
    sendDataToServer(playerStats, fightingStyles, items)
    
    debugPrint("=== Data Collection Cycle Complete ===")
end

-- Auto-send function
local function startAutoSender()
    debugPrint("üöÄ Starting Blox Fruits Stats Auto-Sender")
    debugPrint("üì° Server URL: " .. SERVER_URL)
    debugPrint("‚è±Ô∏è Send Interval: " .. SEND_INTERVAL .. " seconds")
    debugPrint("üéÆ Player: " .. Player.Name .. " (ID: " .. Player.UserId .. ")")
    
    -- G·ª≠i data l·∫ßn ƒë·∫ßu
    collectAndSendData()
    
    -- Thi·∫øt l·∫≠p g·ª≠i ƒë·ªãnh k·ª≥
    spawn(function()
        while true do
            wait(SEND_INTERVAL)
            collectAndSendData()
        end
    end)
    
    debugPrint("‚úÖ Auto-sender started successfully!")
    print("üçì Blox Fruits Stats Tracker ƒëang ch·∫°y!")
    print("üí° D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c g·ª≠i m·ªói " .. SEND_INTERVAL .. " gi√¢y")
    print("üåê Check dashboard t·∫°i: http://localhost:5000")
end

-- Kh·ªüi ch·∫°y
startAutoSender()

-- Event khi player leave ƒë·ªÉ g·ª≠i data cu·ªëi
game.Players.PlayerRemoving:Connect(function(player)
    if player == Player then
        debugPrint("Player leaving, sending final data...")
        collectAndSendData()
    end
end)

-- Commands ƒë·ªÉ test th·ªß c√¥ng
_G.BloxFruitsTracker = {
    sendNow = collectAndSendData,
    toggleDebug = function()
        DEBUG_MODE = not DEBUG_MODE
        debugPrint("Debug mode: " .. (DEBUG_MODE and "ON" or "OFF"))
    end,
    setInterval = function(seconds)
        SEND_INTERVAL = seconds
        debugPrint("Interval changed to: " .. seconds .. " seconds")
    end
}

print("üçì Commands available:")
print("   _G.BloxFruitsTracker.sendNow() - G·ª≠i data ngay")
print("   _G.BloxFruitsTracker.toggleDebug() - B·∫≠t/t·∫Øt debug")
print("   _G.BloxFruitsTracker.setInterval(seconds) - ƒê·ªïi th·ªùi gian g·ª≠i")
